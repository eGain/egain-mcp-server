/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { EgainMcpCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$getAnnouncements } from "./tools/getAnnouncements.js";
import { tool$getArticle } from "./tools/getArticle.js";
import { tool$getPopularArticles } from "./tools/getPopularArticles.js";
import { tool$getPortals } from "./tools/getPortals.js";
import { tool$makeSuggestion } from "./tools/makeSuggestion.js";
import { tool$queryAnswers } from "./tools/queryAnswers.js";
import { tool$queryRetrieve } from "./tools/queryRetrieve.js";
import { tool$querySearch } from "./tools/querySearch.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  getSDK?: () => EgainMcpCore;
  serverURL?: string | undefined;
  security?: SDKOptions["security"] | undefined;
  server?: SDKOptions["server"] | undefined;
  API_DOMAIN?: SDKOptions["API_DOMAIN"] | undefined;
}) {
  const server = new McpServer({
    name: "EgainMcp",
    version: "0.3.1",
  });

  const getClient = deps.getSDK || (() =>
    new EgainMcpCore({
      security: deps.security,
      serverURL: deps.serverURL,
      server: deps.server,
      API_DOMAIN: deps.API_DOMAIN,
      debugLogger: deps.logger.level === "debug"
        ? {
          log: (...args) => console.log(...args),
          group: (...args) => console.group(...args),
          groupEnd: (...args) => console.groupEnd(...args),
        }
        : undefined,
    }));

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    getClient,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(
    deps.logger,
    server,
    getClient,
    scopes,
  );
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    getClient,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, getClient, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$getArticle);
  tool(tool$getAnnouncements);
  tool(tool$getPopularArticles);
  tool(tool$getPortals);
  tool(tool$makeSuggestion);
  tool(tool$queryAnswers);
  tool(tool$querySearch);
  tool(tool$queryRetrieve);

  return server;
}
