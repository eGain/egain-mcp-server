/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { getPortals } from "../../funcs/getPortals.js";
import { GetMyPortalsRequest$zodSchema } from "../../models/getmyportalsop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: GetMyPortalsRequest$zodSchema,
};

export const tool$getPortals: ToolDefinition<typeof args> = {
  name: "get-portals",
  description: `Get All Portals Accessible To User

## Overview
  The Get All Portals Accessible to User API allows a user to fetch all portals accessible to user across all department.
  * If no access tags are specified for a portal, then any user can access the portal.
  * If access tags are specified for a portal, users with a user profile that allows access have access to the portal. For users with multiple user profiles, the user profile that allows access does not need to be the active user profile.
  * All the global users(partition) cannot be assigned user profiles; their access is limited to portals without access restrictions.
  * The only articles returned are associated to an Article type when the parameter, “Include in browse on portals” is set to "Yes".
  * When the "shortUrlTemplate" query parameter is provided, the API filters accessible portals according to the specified language and template name. Portal Short URL specific to to the "shortUrlTemplate" query parameter value is returned in the response.
  * When there is no short URL available for a specific language, the API returns a portal object with an empty "shortURL" field.
`,
  annotations: {
    "destructiveHint": false,
    "idempotentHint": false,
    "openWorldHint": false,
    "readOnlyHint": true,
  },
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await getPortals(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
