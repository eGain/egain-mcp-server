/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  TopicBreadcrumb,
  TopicBreadcrumb$zodSchema,
} from "./topicbreadcrumb.js";

/**
 * Format of the source document (HTML, Doc, or PDF).
 */
export const SearchResultDocType$zodSchema = z.enum([
  "HTML",
  "Doc",
  "Pdf",
]).describe("Format of the source document (HTML, Doc, or PDF).");

export type SearchResultDocType = z.infer<typeof SearchResultDocType$zodSchema>;

/**
 * The repository or system where the content originated (e.g., eGain, SharePoint).
 */
export const SearchResultSource$zodSchema = z.enum([
  "eGain Article",
  "eGain Attachment",
]).describe(
  "The repository or system where the content originated (e.g., eGain, SharePoint).",
);

export type SearchResultSource = z.infer<typeof SearchResultSource$zodSchema>;

/**
 * Specifies the type of content is being shown in the snippet.
 */
export const SnippetType$zodSchema = z.enum([
  "chunks",
  "articleContent",
]).describe("Specifies the type of content is being shown in the snippet.");

export type SnippetType = z.infer<typeof SnippetType$zodSchema>;

/**
 * Represents a single document or snippet returned by search, along with its metadata and relevance score.
 */
export type SearchResult = {
  id: string;
  name: string;
  docType: SearchResultDocType;
  source: SearchResultSource;
  snippet: string;
  snippetType: SnippetType;
  relevanceScore: number;
  topicBreadCrumb?: TopicBreadcrumb | undefined;
};

export const SearchResult$zodSchema: z.ZodType<
  SearchResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  docType: SearchResultDocType$zodSchema,
  id: z.string(),
  name: z.string(),
  relevanceScore: z.number(),
  snippet: z.string(),
  snippetType: SnippetType$zodSchema,
  source: SearchResultSource$zodSchema,
  topicBreadCrumb: TopicBreadcrumb$zodSchema.optional(),
}).describe(
  "Represents a single document or snippet returned by search, along with its metadata and relevance score.",
);
