/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AcceptLanguage, AcceptLanguage$zodSchema } from "./acceptlanguage.js";
import { ArticleResults, ArticleResults$zodSchema } from "./articleresults.js";
import {
  LanguageQueryParameter,
  LanguageQueryParameter$zodSchema,
} from "./languagequeryparameter.js";
import { WSErrorCommon, WSErrorCommon$zodSchema } from "./wserrorcommon.js";

export type GetpopulararticlesRequest = {
  acceptLanguage?: AcceptLanguage | undefined;
  portalID: string;
  dollarFilterTopicId?: string | undefined;
  Dollar_lang?: LanguageQueryParameter | undefined;
  dollarFilterTags?: string | undefined;
  Dollar_pagenum?: number | undefined;
  Dollar_pagesize?: number | undefined;
};

export const GetpopulararticlesRequest$zodSchema: z.ZodType<
  GetpopulararticlesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Dollar_lang: LanguageQueryParameter$zodSchema.default("en-US"),
  Dollar_pagenum: z.number().int().default(1).describe(
    "Pagination parameter that specifies the page number of results to be returned. Used in conjunction with $pagesize.",
  ),
  Dollar_pagesize: z.number().int().default(10).describe(
    "Pagination parameter that specifies the number of results per page. Used in conjunction with $pagenum.",
  ),
  acceptLanguage: AcceptLanguage$zodSchema.default("en-US"),
  dollarFilterTags: z.string().describe(
    "A comma separated list of Tag / Tag Group IDs. The query results will be filtered by the tags that are specified.<br><br>Tag IDs and Tag Group IDs can be mixed together.",
  ).optional(),
  dollarFilterTopicId: z.string().describe(
    "The ID of the topic. It is used to restrict to a specific topic.",
  ).optional(),
  portalID: z.string().describe(
    "The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.",
  ),
});

export type GetpopulararticlesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ArticleResults?: ArticleResults | undefined;
  WSErrorCommon?: WSErrorCommon | undefined;
};

export const GetpopulararticlesResponse$zodSchema: z.ZodType<
  GetpopulararticlesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ArticleResults: ArticleResults$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  WSErrorCommon: WSErrorCommon$zodSchema.optional(),
});
