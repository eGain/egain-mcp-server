/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  AdditionalSnippets,
  AdditionalSnippets$zodSchema,
} from "./additionalsnippets.js";
import { Tags, Tags$zodSchema } from "./tags.js";
import {
  TopicBreadcrumb,
  TopicBreadcrumb$zodSchema,
} from "./topicbreadcrumb.js";

/**
 * Format of the source document (HTML, DOCX, PPTX or PDF).
 */
export const ArticleSearchResultDocType$zodSchema = z.enum([
  "HTML",
  "DOCX",
  "PDF",
  "PPTX",
]).describe("Format of the source document (HTML, DOCX, PPTX or PDF).");

export type ArticleSearchResultDocType = z.infer<
  typeof ArticleSearchResultDocType$zodSchema
>;

/**
 * The source type.
 */
export const ArticleSearchResultSource$zodSchema = z.enum([
  "eGain Article",
  "eGain Attachment",
]).describe("The source type.");

export type ArticleSearchResultSource = z.infer<
  typeof ArticleSearchResultSource$zodSchema
>;

/**
 * The custom attribute's type.
 */
export const ArticleSearchResultType$zodSchema = z.enum([
  "STRING",
  "INTEGER",
  "BOOLEAN",
  "DATETIME",
]).describe("The custom attribute's type.");

export type ArticleSearchResultType = z.infer<
  typeof ArticleSearchResultType$zodSchema
>;

export type ArticleSearchResultCustomAttribute = {
  name?: string | undefined;
  value?: Array<string> | undefined;
  type?: ArticleSearchResultType | undefined;
};

export const ArticleSearchResultCustomAttribute$zodSchema: z.ZodType<
  ArticleSearchResultCustomAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  type: ArticleSearchResultType$zodSchema.optional(),
  value: z.array(z.string()).optional(),
});

/**
 * The type of the Article and its attributes.
 */
export type ArticleTypeAttributes = {
  typeName?: string | undefined;
  articleTypeId?: string | undefined;
};

export const ArticleTypeAttributes$zodSchema: z.ZodType<
  ArticleTypeAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  articleTypeId: z.string().optional(),
  typeName: z.string().optional(),
}).describe("The type of the Article and its attributes.");

/**
 * Represents a single document or snippet returned by search, along with its metadata and relevance score.
 */
export type ArticleSearchResult = {
  id: string;
  name: string;
  docType: ArticleSearchResultDocType;
  docName?: string | undefined;
  source: ArticleSearchResultSource;
  customAttributes?: Array<ArticleSearchResultCustomAttribute> | undefined;
  snippet?: string | undefined;
  keywordSnippet?: string | undefined;
  additionalSnippets?: Array<AdditionalSnippets> | undefined;
  additionalSnippetCount?: number | undefined;
  contextualSummary?: string | undefined;
  modifiedDate?: string | undefined;
  headerPath?: string | undefined;
  topicBreadcrumb: Array<TopicBreadcrumb>;
  tagCategories?: Array<Tags> | undefined;
  articleTypeAttributes?: ArticleTypeAttributes | undefined;
  relevanceScore: number;
};

export const ArticleSearchResult$zodSchema: z.ZodType<
  ArticleSearchResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  additionalSnippetCount: z.number().int().optional(),
  additionalSnippets: z.array(AdditionalSnippets$zodSchema).optional(),
  articleTypeAttributes: z.lazy(() => ArticleTypeAttributes$zodSchema)
    .optional(),
  contextualSummary: z.string().optional(),
  customAttributes: z.array(
    z.lazy(() => ArticleSearchResultCustomAttribute$zodSchema),
  ).optional(),
  docName: z.string().optional(),
  docType: ArticleSearchResultDocType$zodSchema,
  headerPath: z.string().optional(),
  id: z.string(),
  keywordSnippet: z.string().optional(),
  modifiedDate: z.string().optional(),
  name: z.string(),
  relevanceScore: z.number(),
  snippet: z.string().optional(),
  source: ArticleSearchResultSource$zodSchema,
  tagCategories: z.array(Tags$zodSchema).optional(),
  topicBreadcrumb: z.array(TopicBreadcrumb$zodSchema),
}).describe(
  "Represents a single document or snippet returned by search, along with its metadata and relevance score.",
);
