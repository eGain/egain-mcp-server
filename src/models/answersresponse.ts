/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ReferenceResponse,
  ReferenceResponse$zodSchema,
} from "./referenceresponse.js";
import { SearchResult, SearchResult$zodSchema } from "./searchresult.js";

/**
 * Indicates whether the answer was extracted directly from documents or generated by the LLM.
 */
export const AnswersResponseAnswerType$zodSchema = z.enum([
  "certified",
  "generative",
]).describe(
  "Indicates whether the answer was extracted directly from documents or generated by the LLM.",
);

export type AnswersResponseAnswerType = z.infer<
  typeof AnswersResponseAnswerType$zodSchema
>;

export type AnswersResponseAnswer = {
  answerValue: string;
  references: Array<ReferenceResponse>;
  answerType: AnswersResponseAnswerType;
  relevanceScore: number;
};

export const AnswersResponseAnswer$zodSchema: z.ZodType<
  AnswersResponseAnswer,
  z.ZodTypeDef,
  unknown
> = z.object({
  answerType: AnswersResponseAnswerType$zodSchema,
  answerValue: z.string(),
  references: z.array(ReferenceResponse$zodSchema),
  relevanceScore: z.number(),
});

/**
 * The channel where the query originated, e.g., directly from the portal or via a custom integration.
 */
export const AnswersResponseType$zodSchema = z.enum([
  "portal",
  "custom",
]).describe(
  "The channel where the query originated, e.g., directly from the portal or via a custom integration.",
);

export type AnswersResponseType = z.infer<typeof AnswersResponseType$zodSchema>;

export type AnswersResponseChannel = {
  type: AnswersResponseType;
  name?: string | undefined;
};

export const AnswersResponseChannel$zodSchema: z.ZodType<
  AnswersResponseChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  type: AnswersResponseType$zodSchema,
});

export type AnswersResponse = {
  answer?: AnswersResponseAnswer | undefined;
  searchResults?: Array<SearchResult> | undefined;
  channel?: AnswersResponseChannel | undefined;
  sessionId?: string | undefined;
  eventId?: string | undefined;
};

export const AnswersResponse$zodSchema: z.ZodType<
  AnswersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  answer: z.lazy(() => AnswersResponseAnswer$zodSchema).optional(),
  channel: z.lazy(() => AnswersResponseChannel$zodSchema).optional(),
  eventId: z.string().optional(),
  searchResults: z.array(SearchResult$zodSchema).optional(),
  sessionId: z.string().optional(),
});
