/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ReferenceResponse,
  ReferenceResponse$zodSchema,
} from "./referenceresponse.js";
import { SearchResult, SearchResult$zodSchema } from "./searchresult.js";

/**
 * Specifies that the answer produced was a certified answer.
 */
export const RetrieveResponseAnswerType$zodSchema = z.enum([
  "certified",
]).describe("Specifies that the answer produced was a certified answer.");

export type RetrieveResponseAnswerType = z.infer<
  typeof RetrieveResponseAnswerType$zodSchema
>;

/**
 * If a certified answer is given. The answer object will be present. <br><br> This will be shown only if certified answers are configured and the certified answer meets the configured threshold.
 */
export type RetrieveResponseAnswer = {
  answerValue: string;
  references: Array<ReferenceResponse>;
  answerType: RetrieveResponseAnswerType;
  relevanceScore: number;
};

export const RetrieveResponseAnswer$zodSchema: z.ZodType<
  RetrieveResponseAnswer,
  z.ZodTypeDef,
  unknown
> = z.object({
  answerType: RetrieveResponseAnswerType$zodSchema,
  answerValue: z.string(),
  references: z.array(ReferenceResponse$zodSchema),
  relevanceScore: z.number(),
}).describe(
  "If a certified answer is given. The answer object will be present. <br><br> This will be shown only if certified answers are configured and the certified answer meets the configured threshold.",
);

/**
 * The channel where the query originated, e.g., directly from the portal or via a custom integration.
 */
export const RetrieveResponseType$zodSchema = z.enum([
  "portal",
  "custom",
]).describe(
  "The channel where the query originated, e.g., directly from the portal or via a custom integration.",
);

export type RetrieveResponseType = z.infer<
  typeof RetrieveResponseType$zodSchema
>;

export type RetrieveResponseChannel = {
  type: RetrieveResponseType;
  name?: string | undefined;
};

export const RetrieveResponseChannel$zodSchema: z.ZodType<
  RetrieveResponseChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  type: RetrieveResponseType$zodSchema,
});

export type RetrieveResponse = {
  answer?: RetrieveResponseAnswer | undefined;
  searchResults?: Array<SearchResult> | undefined;
  channel?: RetrieveResponseChannel | undefined;
  eventId?: string | undefined;
  sessionId?: string | undefined;
};

export const RetrieveResponse$zodSchema: z.ZodType<
  RetrieveResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  answer: z.lazy(() => RetrieveResponseAnswer$zodSchema).optional(),
  channel: z.lazy(() => RetrieveResponseChannel$zodSchema).optional(),
  eventId: z.string().optional(),
  searchResults: z.array(SearchResult$zodSchema).optional(),
  sessionId: z.string().optional(),
});
