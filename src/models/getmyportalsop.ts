/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AcceptLanguage, AcceptLanguage$zodSchema } from "./acceptlanguage.js";
import {
  AllAccessiblePortals,
  AllAccessiblePortals$zodSchema,
} from "./allaccessibleportals.js";
import {
  MandatoryLanguageQueryParameter,
  MandatoryLanguageQueryParameter$zodSchema,
} from "./mandatorylanguagequeryparameter.js";
import { Order, Order$zodSchema } from "./order.js";
import {
  SortIdNameDepartment,
  SortIdNameDepartment$zodSchema,
} from "./sortidnamedepartment.js";
import { WSErrorCommon, WSErrorCommon$zodSchema } from "./wserrorcommon.js";

export const GetMyPortalsOpServerList = [
  /**
   * Production Server
   */
  "https://{API_DOMAIN}/knowledge/portalmgr/v4",
] as const;

export type GetMyPortalsRequest = {
  acceptLanguage?: AcceptLanguage | undefined;
  Dollar_lang: MandatoryLanguageQueryParameter;
  department?: string | undefined;
  filterText?: string | undefined;
  shortUrlTemplate?: string | undefined;
  Dollar_sort?: SortIdNameDepartment | undefined;
  Dollar_order?: Order | undefined;
  Dollar_pagenum?: number | undefined;
  Dollar_pagesize?: number | undefined;
};

export const GetMyPortalsRequest$zodSchema: z.ZodType<
  GetMyPortalsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Dollar_lang: MandatoryLanguageQueryParameter$zodSchema,
  Dollar_order: Order$zodSchema.optional(),
  Dollar_pagenum: z.number().int().default(1).describe(
    "Pagination parameter that specifies the page number of results to be returned. Used in conjunction with $pagesize.",
  ),
  Dollar_pagesize: z.number().int().default(25).describe(
    "Pagination parameter that specifies the number of results per page. Used in conjunction with $pagenum.<br>Valid range of 5-25<br>_Default value_: 25",
  ),
  Dollar_sort: SortIdNameDepartment$zodSchema.optional(),
  acceptLanguage: AcceptLanguage$zodSchema.default("en-US"),
  department: z.string().describe(
    "The Name of the department for which portals are to be fetched",
  ).optional(),
  filterText: z.string().describe(
    "Portal name starting with a specific character are considered to filter the result.",
  ).optional(),
  shortUrlTemplate: z.string().describe(
    "The Name of the template used while creating Short URL.",
  ).optional(),
});

export type GetMyPortalsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  AllAccessiblePortals?: AllAccessiblePortals | undefined;
  WSErrorCommon?: WSErrorCommon | undefined;
};

export const GetMyPortalsResponse$zodSchema: z.ZodType<
  GetMyPortalsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  AllAccessiblePortals: AllAccessiblePortals$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  WSErrorCommon: WSErrorCommon$zodSchema.optional(),
});
