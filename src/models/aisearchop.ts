/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  LanguageCodeParameter,
  LanguageCodeParameter$zodSchema,
} from "./languagecodeparameter.js";
import { SearchResponse, SearchResponse$zodSchema } from "./searchresponse.js";

export type AiSearchRequest = {
  q: string;
  portalID: string;
  dollarFilterUserProfileID?: string | undefined;
  Dollar_lang?: LanguageCodeParameter | undefined;
  dollarFilterTags?: { [k: string]: Array<string> } | undefined;
  dollarFilterTopicIds?: Array<string> | undefined;
  articleCustomAdditionalAttributes?: string | undefined;
};

export const AiSearchRequest$zodSchema: z.ZodType<
  AiSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Dollar_lang: LanguageCodeParameter$zodSchema.default("en-US"),
  articleCustomAdditionalAttributes: z.string().describe(
    "One or more comma-separated names for article custom attributes defined by the user to be returned.",
  ).optional(),
  dollarFilterTags: z.record(z.array(z.string())).describe(
    "An object where each key is a **Category Tag ID** (numeric string),  \n"
      + "and each value is an array of **Tag IDs** for that category.\n"
      + "",
  ).optional(),
  dollarFilterTopicIds: z.array(z.string()).optional(),
  dollarFilterUserProfileID: z.string().describe(
    "The Readable ID of the user profile.",
  ).optional(),
  portalID: z.string().describe(
    "The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.",
  ),
  q: z.string().describe("The search query string."),
});

export type AiSearchResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  SearchResponse?: SearchResponse | undefined;
};

export const AiSearchResponse$zodSchema: z.ZodType<
  AiSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  SearchResponse: SearchResponse$zodSchema.optional(),
  StatusCode: z.number().int(),
});
