/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AcceptLanguage, AcceptLanguage$zodSchema } from "./acceptlanguage.js";
import {
  ArticleResultAdditionalAttributes,
  ArticleResultAdditionalAttributes$zodSchema,
} from "./articleresultadditionalattributes.js";
import { ArticleResults, ArticleResults$zodSchema } from "./articleresults.js";
import {
  LanguageQueryParameter,
  LanguageQueryParameter$zodSchema,
} from "./languagequeryparameter.js";
import {
  WorkflowMilestone,
  WorkflowMilestone$zodSchema,
} from "./workflowmilestone.js";
import { WSErrorCommon, WSErrorCommon$zodSchema } from "./wserrorcommon.js";

export type GetAnnouncementArticlesRequest = {
  acceptLanguage?: AcceptLanguage | undefined;
  portalID: string;
  dollarFilterTags?: string | undefined;
  articleResultAdditionalAttributes?:
    | Array<ArticleResultAdditionalAttributes>
    | undefined;
  workflowMilestone?: WorkflowMilestone | undefined;
  Dollar_lang?: LanguageQueryParameter | undefined;
  Dollar_pagenum?: number | undefined;
  Dollar_pagesize?: number | undefined;
};

export const GetAnnouncementArticlesRequest$zodSchema: z.ZodType<
  GetAnnouncementArticlesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Dollar_lang: LanguageQueryParameter$zodSchema.default("en-US"),
  Dollar_pagenum: z.number().int().default(1).describe(
    "Pagination parameter that specifies the page number of results to be returned. Used in conjunction with $pagesize.",
  ),
  Dollar_pagesize: z.number().int().default(10).describe(
    "Pagination parameter that specifies the number of results per page. Used in conjunction with $pagenum.",
  ),
  acceptLanguage: AcceptLanguage$zodSchema.default("en-US"),
  articleResultAdditionalAttributes: z.array(
    ArticleResultAdditionalAttributes$zodSchema,
  ).describe(
    "The attributes of an Article to be returned *in addition to* the default list of attributes, listed below. Multiple additional attributes can be specified using a comma-separated list. Passing 'all' will return all attributes.\n"
      + "\n"
      + "#### Default Attributes\n"
      + "These Article attributes are always returned:\n"
      + "\n"
      + "| Name | Description \n"
      + "| ---- | -----------\n"
      + "| id | The ID of the Article.\n"
      + "| name  | The name of the Article.\n"
      + "| articleType | The Article Type and its attributes.\n"
      + "| createdBy | The ID, first name, middle name and last name of the user that created the Article.\n"
      + "| createdDate | The date that the Article was created.\n"
      + "| hasAttachments | True: The Article has one or more attachments.<br>False: The Article does not have any attachments.\n"
      + "| languageCode | The language code of the Article language. \n"
      + "| modifiedBy | The ID, first name, middle name and last name of the user that last modified the Article.\n"
      + "| modifiedDate | The date that the Article was last modified on.\n"
      + "| link | The link object, used to retrieve the details of the Article.\n"
      + "| versionId | The ID of the Article version that is returned.\n"
      + "",
  ).optional(),
  dollarFilterTags: z.string().describe(
    "A comma separated list of Tag / Tag Group IDs. The query results will be filtered by the tags that are specified.<br><br>Tag IDs and Tag Group IDs can be mixed together.",
  ).optional(),
  portalID: z.string().describe(
    "The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.",
  ),
  workflowMilestone: WorkflowMilestone$zodSchema.optional(),
});

export type GetAnnouncementArticlesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ArticleResults?: ArticleResults | undefined;
  WSErrorCommon?: WSErrorCommon | undefined;
};

export const GetAnnouncementArticlesResponse$zodSchema: z.ZodType<
  GetAnnouncementArticlesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ArticleResults: ArticleResults$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  WSErrorCommon: WSErrorCommon$zodSchema.optional(),
});
