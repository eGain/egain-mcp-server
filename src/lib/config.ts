/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Security } from "../models/security.js";
import { HTTPClient } from "./http.js";
import { Logger } from "./logger.js";
import { RetryConfig } from "./retries.js";
import { Params, pathToFunc } from "./url.js";

/**
 * Portal Manager API Server
 */
export const ServerServer0 = "server_0";
/**
 * AI Services API Server
 */
export const ServerServer1 = "server_1";
/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = {
  [ServerServer0]: "https://{API_DOMAIN}/knowledge/portalmgr/v4",
  [ServerServer1]: "https://{API_DOMAIN}/core/aiservices/v4",
} as const;

export type SDKOptions = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: Security | (() => Promise<Security>) | undefined;

  httpClient?: HTTPClient;
  /**
   * Allows overriding the default server used by the SDK
   */
  server?: keyof typeof ServerList | undefined;
  /**
   * Sets the API_DOMAIN variable for url substitution
   */
  API_DOMAIN?: string | undefined;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string | undefined;
  /**
   * Allows overriding the default user agent used by the SDK
   */
  userAgent?: string | undefined;
  /**
   * Allows overriding the default retry config used by the SDK
   */
  retryConfig?: RetryConfig;
  timeoutMs?: number;
  debugLogger?: Logger | undefined;
};

export function serverURLFromOptions(options: SDKOptions): URL | null {
  let serverURL = options.serverURL;

  const serverParams: Record<string, Params> = {
    "server_0": {
      "API_DOMAIN": options.API_DOMAIN ?? "api.aidev.egain.cloud",
    },
    "server_1": {
      "API_DOMAIN": options.API_DOMAIN ?? "api.aidev.egain.cloud",
    },
  };

  let params: Params = {};

  if (!serverURL) {
    const server = options.server ?? ServerServer0;
    serverURL = ServerList[server] || "";
    params = serverParams[server] || {};
  }

  const u = pathToFunc(serverURL)(params);
  return new URL(u);
}

export const SDK_METADATA = {
  language: "typescript",
  openapiDocVersion: "1.0.0",
  sdkVersion: "0.3.0",
  genVersion: "2.723.8",
  userAgent: "speakeasy-sdk/mcp-typescript 0.3.0 2.723.8 1.0.0 egain-mcp",
} as const;
